# Dockerfile.dev for backend NestJS service

# Use official Node.js Alpine image as a base
FROM node:18-alpine AS development

# Set working directory
WORKDIR /app

# Install pnpm globally
RUN npm install -g pnpm

# Configure pnpm to use a deterministic store directory inside the container
RUN pnpm config set store-dir /app/.pnpm-store

# Copy package.json
# This is done separately to leverage Docker's layer caching.
# Dependencies are only re-installed if package.json changes.
COPY package.json ./

# Install dependencies using pnpm
# Include dev dependencies since they are needed for migrations (prisma)
RUN pnpm install --include=dev

# Copy the rest of the application code
# This includes Prisma schema, source files, etc.
# Ensure entrypoint.sh and run-migrations.sh are copied if they are in the build context.
COPY . .

# Explicitly copy migration script and entrypoint script to ensure they are present
# and to allow for specific path references if needed.
# Assumes run-migrations.sh is in prisma/migrations/ within the build context (packages/backend)
# Assumes entrypoint.sh is in the root of the build context (packages/backend)
COPY prisma/migrations/run-migrations.sh /app/prisma/migrations/run-migrations.sh
COPY entrypoint.sh /app/entrypoint.sh

# Make scripts executable
RUN chmod +x /app/prisma/migrations/run-migrations.sh \
    && chmod +x /app/entrypoint.sh

# Expose the port the app runs on
EXPOSE 8080

# Set the entrypoint. This script will run migrations and then the CMD.
ENTRYPOINT ["/app/entrypoint.sh"]

# Default command to run the application in development mode
# This will be passed as arguments to the entrypoint.sh script (e.g., exec "$@")
CMD ["pnpm", "run", "start:dev"]
